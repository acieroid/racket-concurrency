#lang racket
(require "actors.rkt")
(define NumWorkers 1 ;(int-top)
  )
(define Priorities 2 ;(int-top)
  )
(define Threshold 1 ;(int-top)
  )
(define Size 3 ;(int-top)
  )
(define SolutionsLimit 10;(int-top)
  )
(define (build-vector n f)
  (letrec ((v (make-vector n #f))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 0)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))

(define master-actor
  (a/actor "master-actor" (workers result-counter message-counter num-workers-terminated num-work-sent num-work-completed)
           (start ()
                  (a/become master-actor
                            (build-vector NumWorkers (lambda (i)
                                                       (let ((w (a/create worker-actor a/self i)))
                                                         (if (= i 0) (a/send w work '(0) 0) #t)
                                                         w)))
                            result-counter message-counter num-workers-terminated num-work-sent num-work-completed))
           (work (data depth)
                 (a/log "result: ~a, message: ~a, terminated: ~a, sent: ~a, completed: ~a~n" result-counter message-counter num-workers-terminated num-work-sent num-work-completed)
                 (a/send (vector-ref workers message-counter) work '(0) 0)
                 (a/become master-actor workers result-counter (modulo (+ message-counter 1) NumWorkers) num-workers-terminated (+ 1 num-work-sent) num-work-completed))
           (result ()
                   (if (= (+ result-counter 1) SolutionsLimit)
                       (vector-foreach (lambda (w) (a/send w stop)) workers)
                       #t)
                   (a/become master-actor workers (+ result-counter 1) message-counter num-workers-terminated num-work-sent num-work-completed))
           (done ()
                 (if (= (+ num-work-completed 1) num-work-sent)
                     (vector-foreach (lambda (w) (a/send w stop)) workers)
                     #t)
                 (a/become master-actor workers result-counter message-counter num-workers-terminated num-work-sent (+ num-work-completed 1)))
           (stop ()
                 (if (= (+ num-workers-terminated 1) NumWorkers)
                     (a/terminate)
                     (a/become master-actor workers result-counter message-counter (+ num-workers-terminated 1) num-work-sent num-work-completed)))))
(define (copy-append-i l i)
  (if (null? l)
      (cons i '())
      (cons (car l) (copy-append-i (cdr l) i))))
(define (valid-board n a)
  (letrec ((loopi (lambda (i)
                    (if (= i n)
                        #t
                        (letrec ((loopj (lambda (j)
                                          (if (= j n)
                                              #t
                                              (let ((p (list-ref a i))
                                                    (q (list-ref a j)))
                                                (if (or (= q p) (= q (- p (- j i))) (= q (+ p (- j i))))
                                                    #f
                                                    (loopj (+ j 1))))))))
                          (if (not (loopj (+ i 1)))
                              #f
                              (loopi (+ i 1))))))))
    (loopi 0)))
(define (nqueens-seq data depth master)
  (if (= Size depth)
      (a/send master result)
      (letrec ((loop (lambda (i)
                       (if (= i Size)
                           #t
                           (let ((data2 (copy-append-i data i)))
                             (if (valid-board (+ depth 1) data2)
                                 (nqueens-seq data2 (+ depth 1) master)
                                 #t)
                             (loop (+ i 1)))))))
        (loop 0))))
(define worker-actor
  (a/actor "worker-actor" (master id)
           (work (data depth)
                 (if (= depth Size)
                     (a/send master result)
                     (if (>= depth Threshold)
                         (nqueens-seq data depth master)
                         (letrec ((loop (lambda (i)
                                          (if (= i Size)
                                              #t
                                              (let ((data2 (copy-append-i data i)))
                                                (if (valid-board (+ depth 1) data)
                                                    (a/send master work data2 (+ depth 1))
                                                    #t)
                                                (loop (+ i 1)))))))
                           (loop 0))))
                 (a/send master done)
                 (a/become worker-actor master id))
           (stop ()
                 (a/send master stop)
                 (a/terminate))))
(define master (a/create master-actor #f 0 0 0 0 0))
(a/send master start)
(a/wait)
