(branches ( (become branches (integrator "#<vector>")) (received value ({Int}))))
(fir-filter ((become fir-filter ({Str} sample-filter "#<vector>" {Int} #f))
             (become fir-filter ({Str} sample-filter "#<vector>" {Int} #t))
             (become fir-filter ({Str} tagged-forward "#<vector>" {Int} #f))
             (become fir-filter ({Str} tagged-forward "#<vector>" {Int} #t))
             (received value ({Int}))))
(producer ( (become producer ({Int})) (received next (source))))
(combine ( (become combine (sink)) (received collection (())) (received collection (())) (received collection ("#<list>"))))
(main ((create delay ({Str} {Int} fir-filter "#<vector>" {Int})) (create combine (sink)) (create fir-filter ({Str} tagged-forward "#<vector>" {Int} #f)) (create source (branches producer {Int}))
       (create fir-filter ({Str} tagged-forward "#<vector>" {Int} #f))
       (create fir-filter ({Str} sample-filter "#<vector>" {Int} #f))
       (create sample-filter ({Int} delay {Int}))
       (create producer ({Int}))
       (create branches (integrator "#<vector>"))
       (create tagged-forward ({Int} integrator))
       (create sink ({Int} {Int}))
       (create bank ({Int} integrator delay))
       (create delay ({Str} {Int} fir-filter "#<vector>" {Int}))
       (create integrator (combine () {Int}))  ))
(sample-filter ( (become sample-filter ({Int} delay {Int})) (received value ({Int}))))
(integrator ( (become integrator (combine () {Int})) (received sourced-value ({Int} {Int}))))
(sink ( (become sink ({Int} {Int})) (received value ({Int}))))
(source ( (become source (branches producer {Int})) (received exit ()) (received boot ())))
(tagged-forward ( (become tagged-forward ({Int} integrator)) (received value ({Int}))))
(bank ( (become bank ({Int} integrator delay)) (received value ({Int}))))
(delay ( (become delay ({Str} {Int} fir-filter "#<vector>" {Int})) (received value ({Int}))))
