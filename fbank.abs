(main ((create delay ({Str} {Num} fir-filter "#<vector>" {Num}))
       (create combine (sink))
       (create source (branches producer {Num}))
       (create fir-filter ({Str} sample-filter "#<vector>" {Num} #f))
       (create fir-filter ({Str} tagged-forward "#<vector>" {Num} #f))
       (create sample-filter ({Num} delay {Num}))
       (create producer ({Num}))
       (create branches (integrator "#<vector>"))
       (create tagged-forward ({Num} integrator))
       (create sink ({Num} {Num}))
       (create bank ({Num} integrator delay))
       (create integrator (combine "#<list>" {Num}))
       ))
(sample-filter ((become sample-filter ({Num} delay {Num}))
                (received value ({Num}))))
(combine ((become combine (sink))
          (received collection ("#<list>"))))
(fir-filter ((become fir-filter ({Str} sample-filter "#<vector>" {Num} #f))
             (become fir-filter ({Str} sample-filter "#<vector>" {Num} #t))
             (become fir-filter ({Str} tagged-forward "#<vector>" {Num} #f))
             (become fir-filter ({Str} tagged-forward "#<vector>" {Num} #t))
             (received value ({Num}))))
(bank ((become bank ({Num} integrator delay))
       (received value ({Num}))))
(producer ((become producer ({Num}))
           (received next (source))))
(branches ((become branches (integrator "#<vector>"))
           (received value ({Num}))))
(tagged-forward ((become tagged-forward ({Num} integrator))
                 (received value ({Num}))))
(sink ((become sink ({Num} {Num}))
       (received value ({Num}))))
(integrator ((become integrator (combine "#<list>" {Num}))
             (received sourced-value ({Num} {Num}))))
(delay ((become delay ({Str} {Num} fir-filter "#<vector>" {Num}))
        (received value ({Num}))))
(source ((become source (branches producer {Num}))
         (received exit ())
         (received boot ())))
