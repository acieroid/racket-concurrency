#lang racket
(require "actors.rkt")
(define NumWorkers (int-top))
(define NumMsgsPerWorker (int-top)
  )
(define SizePercent (modulo (int-top) 100))
(define WritePercent (modulo (int-top) 100))
(define (build-vector n f)
  (letrec ((v (make-vector n #f))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 0)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))
(define master (a/actor "master" (workers sortedlist terminated)
                        (create-workers ()
                                        (let ((workers (build-vector NumWorkers (lambda (i) (a/create worker a/self sortedlist i 0)))))
                                          (vector-foreach (lambda (w) (a/send w do-work)) workers)
                                          (a/become master workers sortedlist terminated)))
                        (end-work ()
                                  ;; (a/log "master got ~a end-work (on ~a)~n" (+ 1 terminated) NumWorkers)
                                  (if (= (+ terminated 1) NumWorkers)
                                      (begin
                                        (a/send sortedlist end-work)
                                        (a/terminate))
                                      (a/become master workers sortedlist (+ terminated 1))))))
(define (worker-work self master sortedlist id message-count)
  (let ((an-int (random 100)))
    (if (< an-int SizePercent)
        (a/send sortedlist size self)
        (if (< an-int (+ SizePercent WritePercent))
            (a/send sortedlist write self (random 100))
            (a/send sortedlist contains self (random 100)))))
  (a/become worker master sortedlist id (+ message-count 1)))
(define worker (a/actor "worker" (master sortedlist id message-count)
                        (do-work () (worker-work a/self master sortedlist id message-count))
                        (result (value)
                                ;; (a/log "!!! worker ~a got result ~a~n" id value)
                                (if (< message-count NumMsgsPerWorker)
                                    (worker-work a/self master sortedlist id message-count)
                                    (begin
                                      ;; (a/log "!!!! terminating ~a after ~a/~a~n" id message-count NumMsgsPerWorker)
                                      (a/send master end-work)
                                      (a/terminate))))))
(define sortedlist (a/actor "sortedlist" (state)
                            (write (sender value)
                                   ;; (a/log "!!! sending result to worker ~a~n" id)
                                   (a/send sender result value)
                                   (a/become sortedlist (cons value state)))
                            (contains (sender value)
                                      ;; (a/log "!!! sending result to worker ~a~n" id)
                                      (a/send sender result (pair? (member value state)))
                                      (a/become sortedlist state))
                            (size (sender)
                                  ;; (a/log "!!! sending result to worker ~a~n" id)
                                  (a/send sender result (length state))
                                  (a/become sortedlist state))
                            (end-work () (a/terminate))))
(define l (a/create sortedlist '()))
(define m (a/create master #f l 0))
(a/send m create-workers)
(a/wait)
