(main ((create master (#f #f {Int} {Int} {Int}))  ))
(master ((create rate-computer ({Int}))
         (create series-worker (master rate-computer {Int}))
         (create series-worker (master #f {Int}))
         (create series-worker (master series-worker {Int}))
         (become master (#f #f {Int} {Int} {Int}))
         (become master (#f "#<vector>" {Int} {Int} {Int}))
         (become master ("#<vector>" #f {Int} {Int} {Int}))
         (become master ("#<vector>" "#<vector>" {Int} {Int} {Int}))
         (received start ()) (received result ({Int}))))
(series-worker (
                (become series-worker-wait (master rate-computer))
                (become series-worker-wait (master #f))
                (become series-worker-wait (master series-worker))
                (become series-worker (master #f {Int}))
                (become series-worker (master rate-computer {Int}))
                (become series-worker (master series-worker {Int}))
                (received stop ()) (received get-term ()) (received next-term ()) (received result ({Int})) (received compute ({Int} series-worker))))
(rate-computer ( (become rate-computer ({Int})) (received compute ({Int} series-worker)) (received stop ())))
