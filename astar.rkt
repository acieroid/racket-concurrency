#lang racket
(require "actors.rkt")
(define NumWorkers (int-top))
(define Threshold (int-top))

(define (build-vector n f)
  (letrec ((v (make-vector n #f))
           (loop (lambda (i)
                   (if (< i n)
                       (begin
                         (vector-set! v i (f i))
                         (loop (+ i 1)))
                       v))))
    (loop 0)))
(define (vector-foreach f v)
  (letrec ((loop (lambda (i)
                   (if (< i (vector-length v))
                       (begin
                         (f (vector-ref v i))
                         (loop (+ i 1)))
                       'done))))
    (loop 0)))
(define (append l m)
  (if (null? l)
      m
      (cons (car l) (append (cdr l) m))))
(define (for-each f l)
  (if (null? l)
      #t
      (if (pair? l)
          (begin (f (car l)) (for-each f (cdr l)))
          (error "Cannot for-each over a non-list"))))

(define master-actor
  (a/actor "master-actor" (workers num-workers-terminated num-work-sent num-work-completed)
           (work (target node)
                 (a/send (vector-ref workers (modulo num-work-sent NumWorkers)) work target node)
                 (a/become master-actor workers num-workers-terminated (+ num-work-sent 1) num-work-completed))
           (received ()
                     (if (= (+ num-work-completed 1) num-work-sent)
                         (vector-foreach (lambda (a) (a/send a stop)) workers)
                         #t)
                     (a/become master-actor workers num-workers-terminated num-work-sent (+ num-work-completed 1)))
           (done ()
                 (vector-foreach (lambda (a) (a/send a stop)) workers)
                 (a/become master-actor workers num-workers-terminated num-work-sent num-work-completed))
           (stop ()
                 (if (= (+ num-workers-terminated 1) NumWorkers)
                     (a/terminate)
                     (a/become master-actor workers (+ num-workers-terminated 1) num-work-sent num-work-completed)))))

(define MaxNeighbors (int-top))
;; represent full non-determinism
(define (neighbors node)
  (case node
    ((0) '(1))
    ((1) '(2 3))
    ((2) '(3 1))
    ((3) '(5 6))
    ((4) '(5))
    ((5) '(4 7 8 9))
    ((6) '(7))
    ((7) '(5))
    ((8) '(5))
    ((9) '(10))
    ((10) '())
    (else '())))
;; (define (neighbors node)
;;   (letrec ((loop (lambda (i acc)
;;                    (if (= i MaxNeighbors)
;;                        acc
;;                        (loop (+ i 1) (cons (int-top) acc))))))
;;     (loop 0 '())))

(define worker-actor
  (a/actor "worker-actor" (master id)
           (work (target node)
                 (letrec ((loop (lambda (queue nodes-processed)
                                  (if (null? queue)
                                      #t
                                      (if (= nodes-processed Threshold)
                                          (begin
                                            (for-each (lambda (node) (a/send master work target node)) queue)
                                            (loop '() nodes-processed))
                                          (let ((neigh (neighbors (car queue))))
                                            (if (member target neigh)
                                                (a/send master done)
                                                (loop (append (cdr queue) neigh) (+ nodes-processed 1)))))))))
                   (loop (cons node '()) 0))
                 (a/send master received)
                 (a/become worker-actor master id))
           (stop ()
                 (a/send master stop)
                 (a/terminate))))

(define origin 0)
(define target 10)
(define master-actor-init
  (a/actor "master-actor-init" ()
           (start ()
                  (a/become master-actor (build-vector NumWorkers (lambda (i)
                                                                    (let ((w (a/create worker-actor a/self i)))
                                                                      (if (= i 0)
                                                                          (a/send w work target origin)
                                                                          #t)
                                                                      w)))
                            0 0 0))))
(define master
  (a/create master-actor-init))
(a/send master start)
(a/wait)
