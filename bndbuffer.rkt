#lang racket
(require "actors.rkt")
(define BufferSize (int-top))
(define NumProducers (int-top))
(define NumConsumers (int-top))
(define NumItemsPerProducer (int-top))
(define ProdCost (int-top))
(define ConsCost (int-top))
(define AdjustedBufferSize (- BufferSize NumProducers))

(define (process-item curTerm cost)
  (letrec ((loopi (lambda (resi i)
                    (letrec ((loopj (lambda (resj j)
                                      (if (>= j 100)
                                          resj
                                          (loopj (+ resj (log (abs (+ (/ (random 100) 100) 0.01)))) (+ j 1))))))
                      (if (>= i cost)
                          resi
                          (loopi (loopj resi 0) (+ i 1)))))))
    (if (> cost 0)
        (loopi curTerm 0)
        (+ curTerm (log (abs (+ (/ (random 100) 100) 0.01)))))))

(define producer-actor
  (a/actor "producer" (id manager prod-item items-produced)
           (produce-data ()
                         (if (= items-produced NumItemsPerProducer)
                             (a/terminate)
                             (let ((new-prod-item (process-item prod-item ProdCost)))
                               (a/send manager data-item prod-item a/self)
                               (a/become producer-actor id manager new-prod-item (+ items-produced 1)))))))

(define consumer-actor
  (a/actor "consumer" (id manager cons-item)
           (data-item (data)
                      (let ((newcons-item (process-item (+ cons-item data) ConsCost)))
                        (a/send manager consumer-available a/self)
                        (a/become consumer-actor a/self)))
           (consumer-exit ()
                          (a/terminate))))

(define manager-actor
  (a/actor "manager" (available-producers available-consumers pending-data num-terminated-producers)
           (data-item (data producer)
                      (let* ((pending-data2 (if (empty? available-consumers)
                                                (append pending-data (cons data '()))
                                                pending-data))
                             (available-consumers2 (if (not (empty? available-consumers))
                                                       (cdr available-consumers)
                                                       available-consumers))
                             (available-producers2 (if (>= (length pending-data) AdjustedBufferSize)
                                                       (append available-producers (cons producer '()))
                                                       available-producers)))
                        (if (not (empty? available-consumers))
                            (a/send (car available-consumers) data-item data)
                            #f)
                        (if (not (>= (length pending-data) AdjustedBufferSize))
                            (a/send producer produce-data)
                            #f)
                        (a/become manager-actor available-producers2 available-consumers2 pending-data2 num-terminated-producers)))
           (consumer-available (consumer)
                               (if (empty? pending-data)
                                   (let ((available-consumers2 (append available-consumers (cons consumer '()))))
                                     (if (and (= (+ num-terminated-producers 1) NumProducers)
                                              (= (length available-consumers) NumConsumers))
                                         (a/terminate)
                                         (a/become manager-actor available-producers available-consumers2 pending-data num-terminated-producers)))
                                   (let ((pending-data2 (cdr pending-data)))
                                     (a/send consumer data-item (car pending-data))
                                     (let ((available-producers2
                                            (if (not (empty? available-producers))
                                                (begin
                                                  (a/send (car available-producers) produce-data)
                                                  (cdr available-producers))
                                                available-producers)))
                                       (a/become manager-actor available-producers2 available-consumers pending-data2 num-terminated-producers)))))
           (producer-exit ()
                          (if (and (= (+ num-terminated-producers 1) NumProducers)
                                   (= (length available-consumers) NumConsumers))
                              (a/terminate)
                              (a/become manager-actor available-producers available-consumers pending-data (+ num-terminated-producers 1))))))
(define manager-actor-init
  (a/actor "manager-actor-init" ()
           (start (producers consumers)
                  (letrec ((send-start (lambda (prods)
                                         (if (empty? prods)
                                             #t
                                             (begin
                                               (a/send (car prods) produce-data)
                                               (send-start (cdr prods)))))))
                    (send-start producers))
                  (a/become manager-actor producers consumers '() 0))))
(define manager (a/create manager-actor-init))
(define producers
  (letrec ((loop-producers (lambda (i acc)
                             (if (< i NumProducers)
                                 (loop-producers (+ i 1)
                                                 (cons (a/create producer-actor i manager 0 0) acc))
                                 acc))))
    (loop-producers 0 '())))
(define consumers
  (letrec ((loop-consumers (lambda (i acc)
                             (if (< i NumConsumers)
                                 (loop-consumers (+ i 1)
                                                 (cons (a/create consumer-actor i manager 0) acc))
                                 acc))))
    (loop-consumers 0 '())))
(a/send manager start producers consumers)
(a/wait)
